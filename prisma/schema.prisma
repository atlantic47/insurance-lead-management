// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  AGENT
}

enum LeadStatus {
  NEW
  CONTACTED
  ENGAGED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
  FOLLOW_UP
}

enum LeadSource {
  MANUAL
  API
  CHATBOT
  EMAIL
  WHATSAPP
  SOCIAL_MEDIA
  WEBSITE
  REFERRAL
}

enum InsuranceType {
  LIFE
  HEALTH
  AUTO
  HOME
  BUSINESS
  TRAVEL
  OTHER
}

enum CommunicationChannel {
  EMAIL
  WHATSAPP
  PHONE
  SMS
  IN_APP
  SOCIAL_MEDIA
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskType {
  FOLLOW_UP
  CALL
  MEETING
  EMAIL
  PROPOSAL
  OTHER
}

// Core Models
model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  role        UserRole @default(AGENT)
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  assignedLeads     Lead[]
  communications    Communication[]
  tasks             Task[]
  auditLogs         AuditLog[]
  aiConversations   AIConversation[]
  contactGroups     ContactGroup[]     @relation("ContactGroupCreator")
  campaigns         Campaign[]         @relation("CampaignCreator")
  campaignTemplates CampaignTemplate[] @relation("TemplateCreator")

  @@map("users")
}

model Company {
  id        String   @id @default(uuid())
  name      String
  address   String?
  phone     String?
  email     String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clients   Client[]

  @@map("companies")
}

model Lead {
  id                    String         @id @default(uuid())
  source                LeadSource
  status                LeadStatus     @default(NEW)
  insuranceType         InsuranceType
  urgency               Int            @default(1) // 1-5 scale
  score                 Float          @default(0) // Lead scoring
  manualScore           Float?         // Manual override
  
  // Contact Information
  firstName             String
  lastName              String
  email                 String?
  phone                 String?
  alternatePhone        String?
  preferredContact      CommunicationChannel?
  
  // Location
  address               String?
  city                  String?
  state                 String?
  zipCode               String?
  country               String?       @default("US")
  
  // Inquiry Details
  inquiryDetails        String?       @db.Text
  budget                Decimal?      @db.Decimal(10, 2)
  expectedCloseDate     DateTime?
  
  // Assignment and Tracking
  assignedUserId        String?
  assignedUser          User?         @relation(fields: [assignedUserId], references: [id])
  
  // Timestamps
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  lastContactedAt       DateTime?
  
  // Relations
  communications        Communication[]
  tasks                 Task[]
  client                Client?
  aiConversations       AIConversation[]
  leadProducts          LeadProduct[]
  chatMessages          ChatMessage[]
  emailMessages         EmailMessage[]
  contactGroups         LeadContactGroup[]

  @@map("leads")
}

model Communication {
  id          String               @id @default(uuid())
  channel     CommunicationChannel
  direction   String               // INBOUND, OUTBOUND
  subject     String?
  content     String               @db.Text
  metadata    Json?                // Store channel-specific data
  isRead      Boolean              @default(false)
  sentAt      DateTime             @default(now())
  
  // Relations
  leadId      String
  lead        Lead                 @relation(fields: [leadId], references: [id], onDelete: Cascade)
  userId      String?
  user        User?                @relation(fields: [userId], references: [id])
  
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@map("communications")
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?   @db.Text
  type            InsuranceType
  basePrice       Decimal?  @db.Decimal(10, 2)
  features        Json?     // Store product features as JSON
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  clients         Client[]
  leadProducts    LeadProduct[]

  @@map("products")
}

model LeadProduct {
  id        String   @id @default(uuid())
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  interest  Int      @default(1) // 1-5 scale
  notes     String?  @db.Text
  createdAt DateTime @default(now())

  @@unique([leadId, productId])
  @@map("lead_products")
}

model Client {
  id              String    @id @default(uuid())
  
  // Lead conversion
  leadId          String?   @unique
  lead            Lead?     @relation(fields: [leadId], references: [id])
  
  // Client Information
  firstName       String
  lastName        String
  email           String?
  phone           String?
  dateOfBirth     DateTime?
  
  // Company relationship
  companyId       String?
  company         Company?  @relation(fields: [companyId], references: [id])
  
  // Policy Information
  productId       String?
  product         Product?  @relation(fields: [productId], references: [id])
  policyNumber    String?   @unique
  premium         Decimal?  @db.Decimal(10, 2)
  commission      Decimal?  @db.Decimal(10, 2)
  startDate       DateTime?
  endDate         DateTime?
  renewalDate     DateTime?
  
  // Status
  isActive        Boolean   @default(true)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("clients")
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?    @db.Text
  type        TaskType
  status      TaskStatus @default(PENDING)
  priority    Int        @default(1) // 1-5 scale
  dueDate     DateTime?
  completedAt DateTime?
  
  // Relations
  leadId      String?
  lead        Lead?      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  assignedUserId String
  assignedUser   User    @relation(fields: [assignedUserId], references: [id])
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("tasks")
}

model AIConversation {
  id            String   @id @default(uuid())
  type          String   // CHATBOT, SENTIMENT_ANALYSIS, AUTO_RESPONSE
  input         String   @db.Text
  output        String   @db.Text
  confidence    Float?   // AI confidence score
  metadata      Json?    // Store AI-specific data
  isEscalated   Boolean  @default(false)
  escalatedAt   DateTime?
  
  // Relations
  leadId        String?
  lead          Lead?    @relation(fields: [leadId], references: [id], onDelete: Cascade)
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  chatMessages  ChatMessage[]
  
  createdAt     DateTime @default(now())

  @@map("ai_conversations")
}

model ChatMessage {
  id                String   @id @default(uuid())
  content           String   @db.Text
  sender            String   // CUSTOMER, AI_ASSISTANT, HUMAN_AGENT
  platform          String   // WHATSAPP, EMAIL, SMS
  platformMessageId String?  // External platform message ID
  metadata          Json?    // Platform-specific data (phone numbers, email addresses, etc.)
  isRead            Boolean  @default(false)
  readAt            DateTime?
  
  // Relations
  conversationId    String?
  conversation      AIConversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  leadId            String?
  lead              Lead?           @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("chat_messages")
}

model EmailMessage {
  id          String   @id @default(uuid())
  subject     String
  content     String   @db.LongText
  fromEmail   String
  toEmail     String
  ccEmails    String?  @db.Text // JSON array of CC emails
  bccEmails   String?  @db.Text // JSON array of BCC emails
  messageId   String?  @unique  // External email message ID
  inReplyTo   String?  // Message ID this is replying to
  threadId    String?  // Email thread identifier
  isRead      Boolean  @default(false)
  readAt      DateTime?
  direction   String   // INBOUND, OUTBOUND
  
  // Relations
  leadId      String?
  lead        Lead?    @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_messages")
}

model AITrainingData {
  id           String    @id @default(uuid())
  type         String    // 'file' or 'url'
  name         String    // filename or URL
  content      String    @db.LongText
  instructions String    @db.Text
  status       String    @default("processing") // 'processing', 'processed', 'error'
  error        String?   @db.Text
  metadata     Json?     // Additional data (file info, URL info, etc.)
  processedAt  DateTime?
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("ai_training_data")
}

model AuditLog {
  id        String   @id @default(uuid())
  action    String   // CREATE, UPDATE, DELETE, LOGIN, etc.
  entity    String   // User, Lead, Communication, etc.
  entityId  String
  oldValue  Json?
  newValue  Json?
  ipAddress String?
  userAgent String?
  
  // Relations
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

enum ContactGroupType {
  WHATSAPP
  EMAIL
  BOTH
}

enum CampaignType {
  WHATSAPP
  EMAIL
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  COMPLETED
  FAILED
  CANCELLED
}

model ContactGroup {
  id          String           @id @default(uuid())
  name        String
  description String?
  type        ContactGroupType
  color       String?          // For UI display (e.g., "#3B82F6")

  // Relations
  leads       LeadContactGroup[]
  campaigns   Campaign[]
  createdById String
  createdBy   User             @relation("ContactGroupCreator", fields: [createdById], references: [id])

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("contact_groups")
}

// Junction table for many-to-many relationship between Leads and ContactGroups
model LeadContactGroup {
  id             String       @id @default(uuid())
  leadId         String
  lead           Lead         @relation(fields: [leadId], references: [id], onDelete: Cascade)
  contactGroupId String
  contactGroup   ContactGroup @relation(fields: [contactGroupId], references: [id], onDelete: Cascade)

  addedAt        DateTime     @default(now())

  @@unique([leadId, contactGroupId])
  @@map("lead_contact_groups")
}

model CampaignTemplate {
  id          String       @id @default(uuid())
  name        String
  description String?
  type        CampaignType // WHATSAPP or EMAIL

  // Email template fields
  subject     String?      // For email only
  content     String       @db.LongText // For email: plain text content with {firstName}, {lastName} variables
  htmlContent String?      @db.LongText // For email: HTML content with inline CSS styling
  variables   Json?        // Available variables for email template (e.g., {firstName}, {lastName})
  isHtml      Boolean      @default(false) // Whether to use HTML content or plain text

  // WhatsApp Business API template fields
  whatsappTemplateName String?     // Meta-approved template name (e.g., "welcome_message")
  whatsappLanguageCode String?     // Language code (e.g., "en", "es")
  whatsappComponents   Json?       // Template structure with header, body, footer, buttons
  whatsappParameters   Json?       // Mapping for numbered placeholders {{1}}, {{2}} to lead fields

  // Relations
  createdById String
  createdBy   User         @relation("TemplateCreator", fields: [createdById], references: [id])
  campaigns   Campaign[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("campaign_templates")
}

model Campaign {
  id                String         @id @default(uuid())
  name              String
  description       String?
  type              CampaignType   // WHATSAPP or EMAIL
  status            CampaignStatus @default(DRAFT)

  // Template
  templateId        String?
  template          CampaignTemplate? @relation(fields: [templateId], references: [id])

  // Custom content (if not using template)
  subject           String?        // For email
  content           String?        @db.LongText

  // Target audience
  contactGroupId    String
  contactGroup      ContactGroup   @relation(fields: [contactGroupId], references: [id])

  // Scheduling
  scheduledAt       DateTime?
  sentAt            DateTime?
  completedAt       DateTime?

  // Stats
  totalRecipients   Int            @default(0)
  sentCount         Int            @default(0)
  failedCount       Int            @default(0)
  deliveredCount    Int            @default(0)
  openedCount       Int            @default(0)
  clickedCount      Int            @default(0)

  // Relations
  createdById       String
  createdBy         User           @relation("CampaignCreator", fields: [createdById], references: [id])

  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@map("campaigns")
}

// System Settings Model
model SystemSettings {
  id        String   @id @default(uuid())
  category  String   // SMTP, WHATSAPP, OPENAI, FACEBOOK, EMAIL, GENERAL
  key       String   // Specific setting key
  value     String   @db.Text // Setting value (encrypted for sensitive data)
  isEncrypted Boolean @default(false) // Whether the value is encrypted
  description String? @db.Text // Description of the setting

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([category, key])
  @@map("system_settings")
}